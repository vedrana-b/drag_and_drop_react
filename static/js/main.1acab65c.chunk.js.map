{"version":3,"sources":["services/jokes.service.js","components/joke.js","components/draggable-item.js","components/jokeInput.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getJokeById","jokeId","get","Joke","props","onMouseDown","event","stopPropagation","className","content","DraggableItem","useState","topOffset","setTopOffset","leftOffset","setLeftOffset","offsets","target","getBoundingClientRect","top","left","y","x","onDrag","index","onMouseUp","style","backgroundColor","color","position","dragMode","width","height","zIndex","children","JokeInput","setJokeId","error","setError","onChange","inputValue","value","Number","isInteger","onClick","onGetJokes","App","jokes","setJokes","setContent","loading","setLoading","posX","setPosX","posY","setPosY","draggedBlock","setDraggedBlock","setDragMode","useEffect","getRandomJokes","mappedJokes","map","item","joke","mappedContent","getJokes","addBackground","then","response","status","data","alert","catch","console","log","Promise","all","jokesService","results","jokesFromResponse","dragHandler","dropHandler","dropableBlock","getAttribute","isNaN","contentCopy","temp","Fragment","onMouseMove","clientX","clientY","key","data-pos","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.1acab65c.chunk.js","sourcesContent":["const axios = require('axios');\r\n\r\nexport function getRandomJokes() {\r\n    return axios.get('https://api.icndb.com/jokes/random/3');\r\n}\r\n\r\nexport function getJokeById(jokeId) {\r\n    return axios.get('https://api.icndb.com/jokes/' + jokeId);\r\n}","import React from 'react';\r\n\r\nconst Joke = (props) => {\r\n    return (\r\n        <p onMouseDown={(event) => { event.stopPropagation() }} className=\"block__text\">{props.content}</p>\r\n    )\r\n}\r\n\r\nexport default Joke;","import React, { useState } from 'react';\r\n\r\nconst DraggableItem = (props) => {\r\n    const [topOffset, setTopOffset] = useState(0);\r\n    const [leftOffset, setLeftOffset] = useState(0);\r\n\r\n    /**\r\n     * Function is executed when item is dragged\r\n     * @param {*} event \r\n     */\r\n    const dragHandler = (event) => {\r\n        // Get item distance from the screen\r\n        const offsets = event.target.getBoundingClientRect();\r\n        const top = offsets.top;\r\n        const left = offsets.left;\r\n\r\n        setTopOffset(props.y - top);\r\n        setLeftOffset(props.x - left);\r\n        props.onDrag(props.index);\r\n    }\r\n\r\n    /**\r\n     * Function is executed when item is dropped\r\n     */\r\n    const dropHandler = () => {\r\n        setLeftOffset(0);\r\n        setTopOffset(0);\r\n    }\r\n\r\n    return (\r\n        <div className=\"block-container\">\r\n            <div className=\"block\"\r\n                onMouseDown={dragHandler}\r\n                onMouseUp={dropHandler}\r\n                style={{\r\n                    backgroundColor: props.color,\r\n                    position: props.dragMode ? 'absolute' : 'static', top: props.y ? props.y - topOffset : 0, left: props.x ? props.x - leftOffset : 0,\r\n                    width: props.dragMode ? '50%' : '100%',\r\n                    height: props.dragMode ? '50%' : '100%',\r\n                    zIndex: props.dragMode ? '1' : '0'\r\n                }}>\r\n                {props.children}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DraggableItem;","import React, {useState} from 'react';\r\n\r\n\r\nconst JokeInput = (props) => {\r\n    const [jokeId, setJokeId] = useState();\r\n    const [error, setError] = useState('');\r\n \r\n    /**\r\n     * Function is executed on jokeId input change\r\n     */\r\n    const jokeIdChangeHandler = (event) => {\r\n        let inputValue = event.target.value;\r\n\r\n        // Validate jokeId input\r\n        if (!Number.isInteger(Number(inputValue))) {\r\n            setError('Please enter an integer');\r\n        } else {\r\n            setError('');\r\n        }\r\n        setJokeId(inputValue);\r\n    }\r\n\r\n    return (\r\n        <div className=\"block block__input-container\"\r\n            onMouseDown={(event) => { event.stopPropagation() }}\r\n            onMouseUp={(event) => { event.stopPropagation() }}\r\n            >\r\n            <div className=\"block__form\">\r\n                <label className=\"block__label\">\r\n                    <input onChange={jokeIdChangeHandler} className=\"block__input\"></input>\r\n                Enter a number\r\n                </label>\r\n                {error &&\r\n                    <p>{error}</p>\r\n                }\r\n               \r\n                <button className=\"block__button\" onClick={() => {props.onGetJokes(jokeId)}}>Play with me!</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default JokeInput;","import React, { useState, useEffect } from 'react';\nimport './App.scss';\nimport * as jokesService from './services/jokes.service';\nimport Joke from './components/joke';\nimport DraggableItem from './components/draggable-item';\nimport JokeInput from './components/jokeInput';\n\nfunction App() {\n    const [jokes, setJokes] = useState([]);\n    const [content, setContent] = useState([]);\n    const [loading, setLoading] = useState(false);\n    const [posX, setPosX] = useState();\n    const [posY, setPosY] = useState();\n    const [draggedBlock, setDraggedBlock] = useState();\n    const [dragMode, setDragMode] = useState(false);\n\n    /**\n     * Run on initial load\n     */\n    useEffect(() => {\n        // Retrieve initial jokes\n        getRandomJokes();\n    }, []);\n\n    /**\n     *  Run on every jokes change\n     */\n    useEffect(() => {\n        // Prepare joke blocks\n        const mappedJokes = jokes.map((item, index) => {\n            return <Joke content={item.joke ? item.joke : item} ></Joke>\n        });\n        \n        // Prepare content blocks\n        const mappedContent = [<JokeInput onGetJokes={getJokes}></JokeInput>, ...mappedJokes].map((item, index) => {\n            return { item, color: addBackground(index) }\n        });\n\n        setContent(mappedContent);\n    }, [jokes]);\n    \n    /**\n     * Function calls JOKE API to retrieve random jokes\n     */\n    const getRandomJokes = () => {\n        setLoading(true);\n        jokesService.getRandomJokes()\n            .then(function (response) {\n                setLoading(false);\n                if (response.status === 200) {\n                    setJokes(response.data.value);\n                } else {\n                    alert('There has been an error. Please try later.')\n                }\n            })\n            .catch(function (error) {\n                // handle error\n                setLoading(false);\n                console.log(error);\n            })\n    }\n\n    /**\n     * Function retrieve jokes as follows: \n     * If jokeId is present, function will retrieve 3 jokes starting with provided Id\n     * Otherwise function will retrieve 3 random jokes\n     * \n     * @param {integer} jokeId \n     */\n    const getJokes = (jokeId) => {\n        setLoading(true);\n\n        if (jokeId) {\n            // Validate jokeId\n            if (!Number.isInteger(Number(jokeId))) {\n                setLoading(false);\n                return;\n            }\n            Promise.all(\n                [jokesService.getJokeById(jokeId),\n                jokesService.getJokeById(+jokeId + 1),\n                jokesService.getJokeById(+jokeId + 2)]\n            ).then(results => {\n                let jokesFromResponse = results.map(response => {\n                    return response.data.value;\n                })\n                setLoading(false);\n                setJokes(jokesFromResponse);\n            })\n        } else {\n            getRandomJokes();\n        }\n    }\n\n    /**\n     * Function returns color for block\n     * \n     * @param {integer} index - Position of the block\n     */\n    const addBackground = (index) => {\n        let pallete = ['red', 'yellow', 'blue', 'green'];\n        return pallete[index];\n    }\n\n    /**\n     * Function sets x,y position of mouse. \n     * Mouse cursor coordinates will be used for dragging blocks.\n     * @param {*} event \n     */\n    const mouseMoveHandler = (event) => {\n        setPosX(event.clientX);\n        setPosY(event.clientY);\n    }\n\n    /**\n     * Function is executed when block is dragged\n     * \n     * @param {*} index \n     */\n    const dragHandler = (index) => {\n        setDragMode(true);\n        setDraggedBlock(index);\n    }\n\n    /**\n     * Function is executed when block is dropped\n     * \n     * @param {*} event \n     */\n    const dropHandler = (event) => {\n        const dropableBlock = +event.target.getAttribute('data-pos');\n\n        setDragMode(false);\n        // Rearrange order of blocks only if all params are present\n        if (isNaN(draggedBlock) || isNaN(dropableBlock)) {\n            return;\n        }\n\n        // Rearrange order of blocks \n        const contentCopy = [...content];\n        const temp = contentCopy[draggedBlock];\n        contentCopy[draggedBlock] = contentCopy[dropableBlock];\n        contentCopy[dropableBlock] = temp;\n\n        setContent(contentCopy);\n    }\n\n    return (\n        <React.Fragment>\n            <div onMouseMove={mouseMoveHandler} className=\"grid-container\">\n                {content.map((item, index) => {\n                    return <DraggableItem\n                        dragMode={dragMode && (draggedBlock === index)}\n                        onDrag={dragHandler}\n                        x={posX}\n                        y={posY}\n                        key={index}\n                        index={index}\n                        color={item.color}\n                        >\n                        {item.item}\n                    </DraggableItem>\n                })}\n                <div style={{ zIndex: dragMode ? '1' : '-1' }} className=\"hidden-container\">\n                    <div data-pos='0' onMouseUp={dropHandler} className=\"hidden-container__item\"></div>\n                    <div data-pos='1' onMouseUp={dropHandler} className=\"hidden-container__item\"></div>\n                    <div data-pos='2' onMouseUp={dropHandler} className=\"hidden-container__item\"></div>\n                    <div data-pos='3' onMouseUp={dropHandler} className=\"hidden-container__item\"></div>\n                </div>\n            </div>\n            {loading &&\n                <div className=\"spinner\">\n                    <div className=\"spinner-icon\"></div>\n                </div>\n            }\n        </React.Fragment>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './reset.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}